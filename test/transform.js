// Generated by CoffeeScript 1.9.2
var exe, expect, ql, source;

expect = require('chai').expect;

ql = require('odoql');

ql = ql();

exe = require('../');

exe = exe();

source = function() {
  return [
    {
      x: 2,
      y: 5
    }
  ];
};

describe('assign', function() {
  it('should create a new property', function(done) {
    var query;
    query = ql(source()).assign({
      value2: ql.ref('y')
    }).query();
    return exe.build(query)(function(err, result) {
      expect(err).to.be["null"];
      expect(result).to.have.length(1);
      expect(result[0]).to.have.all.keys(['x', 'y', 'value2']);
      return done();
    });
  });
  it('should replace an existing property', function(done) {
    var query;
    query = ql(source()).assign({
      y: ql.ref('y')
    }).query();
    return exe.build(query)(function(err, result) {
      expect(err).to.be["null"];
      expect(result).to.have.length(1);
      expect(result[0]).to.have.all.keys(['x', 'y']);
      return done();
    });
  });
  it('should assign multiple properties at once', function(done) {
    var query;
    query = ql(source()).assign({
      y2: ql.ref('y'),
      y3: ql.ref('y'),
      y4: ql.ref('y')
    }).query();
    return exe.build(query)(function(err, result) {
      expect(err).to.be["null"];
      expect(result).to.have.length(1);
      expect(result[0]).to.have.all.keys(['x', 'y', 'y2', 'y3', 'y4']);
      return done();
    });
  });
  return it('should apply to a deep calculation', function(done) {
    var query;
    query = ql(source()).assign({
      y2: ql('y').ref().add(1).mult(ql.ref('x')).div(3).fill({
        param1: 5,
        param2: 2
      }).query()
    }).query();
    return exe.build(query)(function(err, result) {
      expect(err).to.be["null"];
      expect(result).to.have.length(1);
      expect(result[0]).to.have.all.keys(['x', 'y', 'y2']);
      expect(result[0].y2).to.be.equal(4);
      return done();
    });
  });
});
