// Generated by CoffeeScript 1.9.1

/*
Given an object of named queries, return a function
that will execute them all and return errors and the
result.

e.g.
{
  user: ql.queryforuser()
  org: ql.queryforuser()
}
 */
var async;

async = require('odo-async');

module.exports = function(exe, queries) {
  var built, key, query;
  if (queries instanceof Array) {
    return function(cb) {
      var errors, fn, i, len, query, results, tasks;
      errors = {};
      results = {};
      tasks = [];
      fn = function(query) {
        return tasks.push(function(cb) {
          return query.query(function(err, res) {
            var j, k, key, len1, len2, ref, ref1;
            if (err != null) {
              ref = query.keys;
              for (j = 0, len1 = ref.length; j < len1; j++) {
                key = ref[j];
                errors[key] = err[key];
              }
              cb();
            }
            ref1 = query.keys;
            for (k = 0, len2 = ref1.length; k < len2; k++) {
              key = ref1[k];
              results[key] = res[key];
            }
            return cb();
          });
        });
      };
      for (i = 0, len = queries.length; i < len; i++) {
        query = queries[i];
        fn(query);
      }
      return async.parallel(tasks, function() {
        if (Object.keys(errors).length === 0) {
          return cb(null, results);
        } else {
          return cb(errors, results);
        }
      });
    };
  }
  built = {};
  for (key in queries) {
    query = queries[key];
    built[key] = exe.build(query);
  }
  return function(cb) {
    var errors, fn, results, run, tasks;
    errors = {};
    results = {};
    tasks = [];
    fn = function(key, run) {
      return tasks.push(function(cb) {
        return run(function(err, res) {
          if (err != null) {
            errors[key] = err;
          } else {
            results[key] = res;
          }
          return cb();
        });
      });
    };
    for (key in built) {
      run = built[key];
      fn(key, run);
    }
    return async.parallel(tasks, function() {
      if (Object.keys(errors).length === 0) {
        return cb(null, results);
      } else {
        return cb(errors, results);
      }
    });
  };
};
